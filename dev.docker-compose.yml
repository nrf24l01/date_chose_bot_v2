networks:
  date-choice-net:
    driver: bridge
    attachable: true

volumes:
  date-choice-backend-data:
  postgres-data:

services:
  backend:
    container_name: date-choice-backend
    build:
      context: backend/
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:1325/ping"]
      interval: 5s
      retries: 30
      timeout: 3s
      start_period: 5s
    restart: "no"
    expose:
      - 1325
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_SSLMODE=disable
      - POSTGRES_TIMEZONE=Europe/Moscow
      - RUNTIME_PRODUCTION=true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - date-choice-net

  postgres:
    image: postgres:13-alpine
    container_name: date-choice-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    expose:
      - "5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - date-choice-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    command: ["postgres", "-c", "listen_addresses=*"]
  
  frontend:
    container_name: date-choice-frontend
    build:
      context: frontend/
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=${VITE_BACKEND_URL
    env_file:
      - .env
    expose:
      - "8001"
    networks:
      - date-choice-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8001/"]
      interval: 10s
      retries: 30
      timeout: 3s
      start_period: 10s

  tg-bot:
    container_name: date-choice-tg-bot
    build:
      context: bot/
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - BACKEND_URL=http://backend:1325
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - date-choice-net

  nginx:
    image: nginx:stable-alpine
    container_name: date-choice-nginx
    ports:
      - "6000:80"
    volumes:
      - ./docker_nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - date-choice-net

  watchtower:
    image: containrrr/watchtower
    container_name: date-choice-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock